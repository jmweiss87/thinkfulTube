* {
    box-sizing: border-box;
}

body {
    margin: 5px;
}

main {
    border: 1px grey solid;
    font-family: "Times New Roman", Times, serif;
}

.title-container{
    text-align: center;
    background-color: #60A0EC;
    font: black;
}

/* realized using div.js-search-results was putting all in container. */

.js-search-results {
    color: #1960B5;
    background-color: #60A0EC;
    border-bottom: 1px solid black;
    list-style-type: none;
    text-decoration: none;
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(3, [col] 1fr ) ;
    grid-template-rows: repeat(3, [row] 1fr );
}

/* fr is the fraction of free sppace in the grid, sounds very useful...example (in container) 
The fr unit allows you to set the size of a track as a fraction of the free space of the grid container. 
For example, this will set each item to one third the width of the grid container:
.container{
    grid-template-columns: 1fr 1fr 1fr;
}
*/
/* trying js-result-actual as the items. */

/* grid-column-start/end + grid-row-start/end; 
These Determine a grid item's location within the grid by referring to specific grid lines. 
grid-column-start/grid-row-start is the line where the item begins, 
and grid-column-end/grid-row-end is the line where the item ends. */

/* Values for items:
<line> - can be a number to refer to a numbered grid line, or a name to refer to a named grid line
span <number> - the item will span across the provided number of grid tracks
span <name> - the item will span across until it hits the next line with the provided name
auto - indicates auto-placement, an automatic span, or a default span of one */

.js-result-actual{
    display: grid;
    grid-template-columns: repeat(1, 1fr)

}

.js-result-items{
    /* vertical-align: center; */
    justify-self: center;
}